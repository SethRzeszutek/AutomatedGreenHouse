/*global describe, context, it, before, after, beforeEach, afterEach */
"use strict";
const should = require('should');
const RPIFanController = require('./');

describe('Module', function() {
    it('should provide non-initalized class', function() {
        RPIFanController.should.be.a.Function();
    });
    
    it('should provide static access to rpi-gpio', function() {
        RPIFanController.should.have.property('gpio');
    });
});

describe('Create Instance', function() {
    it('should create new instance with default options', function() {
        let rpiFan = new RPIFanController();
        
        rpiFan.should.be.instanceof(RPIFanController);
        rpiFan._opts.should.have.properties(rpiFan._defaultOptions);
    });
    
    it('should create new instance with custom options', function() {
        let options = {
            maxTemp: 50,
            runUntilTemp: 40,
            criticalTemp: 55,
            minFanRunTime: 40,
            maxFanRunTime: 120,
            pollInterval: 10
        };
        
        let rpiFan = new RPIFanController(options);
        
        rpiFan.should.be.instanceof(RPIFanController);
        rpiFan._opts.should.have.properties(options);
        rpiFan._opts.should.have.properties({ pin: 18, minFanOffTime: 60 });
    });
    
    it('should create a new instance with the required properties', function() {
        let rpiFan = new RPIFanController();
        
        rpiFan.should.have.key('_defaultOptions').and.be.a.Object();
        rpiFan.should.have.key('_opts').and.be.a.Object();
        
        rpiFan.should.have.properties({
            _fanStatus: 0,
            _lastOn: null,
            _pinReady: false,
            _currentTemp: 0
        });
    });
    
    it('should create a new instance with EventEmitter', function() {
        let rpiFan = new RPIFanController();
        
        rpiFan.on.should.be.a.Function();
        rpiFan.emit.should.be.a.Function();
    });
});

describe('Instance', function() {
    let rpiFan;
    
    before(function() {
        rpiFan = new RPIFanController();
    });
    
    after(function(done) {
       rpiFan.dispose(done); 
    });
    
    describe('init()', function() {
        afterEach(function(done) {
            rpiFan.dispose(done);
        });
        
        it('should init without a callback function and emit "ready" event', function(done) {
            rpiFan.once('ready', function() {
                done();
            });
            
            let inst = rpiFan.init();
            inst.should.be.instanceof(RPIFanController);
        });
        
        it('should init with a callback function', function(done) {
            rpiFan.init(function(err, ready) {
                should.equal(err, null);
                should.equal(ready, true);
                should.exist(rpiFan._cpuTimer);
                
                rpiFan._cpuTimer.should.be.a.Object();
                rpiFan._currentTemp.should.be.a.Number().and.above(0);
                done();
            });
        });
    });
    
    describe('auto()', function() {
        afterEach(function(done) {
            rpiFan.dispose(done);
        });
        
        it('should dispose when calling returned function', function(done) {
            let stop;
            
            rpiFan.once('ready', function() {
                stop.should.be.a.Function();
                rpiFan.should.have.key('_autoTimer').and.be.a.Object();
                
                setTimeout(function() {
                    stop(function() {
                        should.equal(rpiFan._fanStatus, 0);
                        should.equal(rpiFan._pinReady, false);
                        done();
                    });
                }, 1000);
            });
            
            stop = rpiFan.auto();
        });
    });
    
    describe('testTemp()', function() {
        beforeEach(function(done) {
            rpiFan.init(function() {
                clearInterval(rpiFan._cpuTimer);
                rpiFan._lastOn = null;
                rpiFan._currentTemp = 45;
                done();
            });
        });
        
        afterEach(function(done) {
            rpiFan.dispose(done);
        });
        
        it('should return true with cpu temp of 45', function() {
            let res = rpiFan.testTemp();
            
            should.equal(res, true);
        });
        
        it('should return false with cpu temp of 40', function() {
            rpiFan._currentTemp = 40;
            let res = rpiFan.testTemp();
            
            should.equal(res, false);
        });
        
        it('should return true with cpu temp of 40, but run until 35', function() {
            rpiFan._currentTemp = 40;
            rpiFan._opts.runUntilTemp = 35;
            let res = rpiFan.testTemp();
            
            should.equal(res, true);
        });
        
        it('should return true with cpu temp of 75, but minFanOffTime has not been met', function() {
            rpiFan._currentTemp = 75;
            rpiFan._opts.runUntilTemp = 35;
            rpiFan._lastOn = new Date().getTime();
            let res = rpiFan.testTemp();
            
            should.equal(res, true);
        });
    });
    
    describe('getCPUTemp()', function() {
        it('should return current cpu temp with callback', function(done) {
            rpiFan.getCPUTemp(function(err, temp) {
                should.equal(err, null);
                
                temp.should.be.a.Number().and.above(0);
                done();
            });
        });
        
        it('should update the temp without a callback', function(done) {
            rpiFan.once('tempChange', function(temp) {
                temp.should.be.a.Number().and.above(0);
                done();
            });
            
            rpiFan.getCPUTemp();
        });
    });
    
    describe('toggleFan()', function() {
        beforeEach(function(done) {
            rpiFan.init(function() {
                done();
            });
        });
        
        afterEach(function(done) {
            rpiFan.dispose(done);
        });
        
        it('should turn the fan on and off', function(done) {
            rpiFan.toggleFan(true, function(err, status) {
                should.equal(err, null);
                status.should.be.a.Number().and.equal(1);
                
                //rpiFan._fanStatus.should.be.a.Number().and.equal(1);
                
                should.exist(rpiFan._lastOn);
                
                rpiFan.toggleFan(false, function(err, status) {
                    should.equal(err, null);
                    status.should.be.a.Number().and.equal(0);
                    //rpiFan._fanStatus.should.be.a.Number().and.equal(0);
                    
                    should.exist(rpiFan._lastOn);
                    
                    done();
                });
            });
        });
        
        it('should emit the "change" event', function(done) {
            rpiFan.once('change', function(status) {
                status.should.be.a.Number().and.equal(1);
                done();
            });
            
            rpiFan.toggleFan(true, function(err, status) {
                should.equal(err, null);
            });
        });
    });
});
